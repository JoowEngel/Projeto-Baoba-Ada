@import 'bourbon'; // http://bourbon.io/

@import '../partials/variables'; // colors, fonts etc...

@import '../partials/mixins'; // custom mixins

@import '../partials/layout'; // responsive grid and media queries

/* -------------------------------- 










Primary style

-------------------------------- */

html * {
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
}

*, *:after, *:before {
	@include box-sizing(border-box);
}


.cd-img-replace { /* replace text with a background-image */
	display: inline-block;
	overflow: hidden;
	text-indent: 100%;
	white-space: nowrap;
}

/* -------------------------------- 

Main components 

-------------------------------- */

.cd-section {
	min-height: 100%;
	position: relative;
	padding: 2em 0;

	&:nth-of-type(odd) {
		background-color: $color-1;

		p {
			color: lighten($color-1, 30%);
		}
	}

	&:nth-of-type(even) {
		background-color: $color-2;

		p {
			color: lighten($color-2, 30%);
		}
	}

	h1, p {
		position: absolute;
		@include center;
		width: 90%;
		max-width: $M;
		text-align: center;
	}

	h1 {
		color: $color-4;
		font-weight: 300;
		text-transform: uppercase;
		@include font-size(20px);
	}

	p {
		line-height: 1.6;
	}

	@include MQ(M) {
		h1 {
			@include font-size(30px);
		}

		p {
			@include font-size(20px);
			line-height: 2;
		}
	}
}

.cd-scroll-down {
	position: absolute;
	@include center(x);
	bottom: 20px;
	width: 38px;
	height: 44px;
	background: url('../img/cd-arrow-bottom.svg') no-repeat center center;
}

/* No Touch devices */

.cd-nav-trigger {
	display: none;
}

.no-touch #cd-vertical-nav {
	position: fixed;
	right: 40px;
	@include center(y); // see partials > _mixins.scss
	z-index: 1;

	li {
		text-align: right;
	}

	a {
		display: inline-block;
		@include clearfix;

		/* prevent weird movements on hover when you use a CSS3 transformation - webkit browsers */
		@include backface-visibility(hidden);
		
		span {
			float: right;
			@include transform(scale(.6));
		}

		&:hover span {
			@include transform(scale(1)); 
		}

		&:hover .cd-label {
			opacity: 1;
		}

		&.is-selected .cd-dot {
			background-color: $color-4;
		}
	} 

	.cd-dot {
		position: relative;
		/* we set a top value in order to align the dot with the label. If you change label's font, you may need to change this top value*/
		top: 8px;
		height: 12px;
		width: 12px;
		border-radius: 50%;
		background-color: $color-3;
		-webkit-transition: -webkit-transform 0.2s, background-color 0.5s;
		-moz-transition: -moz-transform 0.2s, background-color 0.5s;
		transition: transform 0.2s, background-color 0.5s;
		@include transform-origin(50% 50%);	
	}

	.cd-label {
		position: relative;
		margin-right: 10px;
		padding: .4em .5em;
		color: $color-4;
		@include font-size(14px);

		-webkit-transition: -webkit-transform 0.2s, opacity 0.2s;
		-moz-transition: -moz-transform 0.2s, opacity 0.2s;
		transition: transform 0.2s, opacity 0.2s;
		opacity: 0;
		@include transform-origin(100% 50%);
	}
}

/* Touch devices */

.touch .cd-nav-trigger {
	display: block;
	z-index: 2;
	position: fixed;
	bottom: 30px;
	right: 5%;
	height: 44px;
	width: 44px;
	@include border-radius;
	background: rgba($color-4, .9);

	span {
		position: absolute;
		height: 4px;
		width: 4px;
		background-color: $color-1;
		border-radius: 50%;
		@include center;

		&::before, &::after {
			content: '';
			height: 100%;
			width: 100%;
			position: absolute;
			left: 0;
			background-color: inherit;
			border-radius: inherit;
		}

		&::before {
			top: -9px;
		}

		&::after {
			bottom: -9px;
		}
	}
}

.touch #cd-vertical-nav {
	position: fixed;
	z-index: 1;
	right: 5%;
	bottom: 30px;
	width: 90%;
	max-width: 400px;
	max-height: 90%;
	overflow-y: scroll;
	-webkit-overflow-scrolling: touch;
	@include transform-origin(right bottom);
	@include transform(scale(0));
	@include transition-property(transform);
	@include transition-duration(.2s);
	@include border-radius;
	background-color: rgba($color-4, .9);

	a {
		display: block;
		padding: 1em;
		border-bottom: 1px solid rgba($color-1, .1);

		span:first-child {
			display: none;
		}

		&.is-selected span:last-child {
			color: $color-3;
		}
	}
	
	&.open {
		@include transform(scale(1));
	}

	&.open + .cd-nav-trigger {
		background-color: transparent;
		
		span {
			background-color: rgba($color-1, 0);	
		}

		span::before, span::after {
			background-color: rgba($color-1, 1);
			height: 3px;
			width: 20px;
			border-radius: 0;
			left: -8px;
		}

		span::before {
			@include transform(rotate(45deg));
			top: 1px;
		}

		span::after {
			@include transform(rotate(135deg));
			bottom: 0;
		}
	}

	li:last-child a {
		border-bottom: none;
	}
}

@include MQ(M) {
	.touch .cd-nav-trigger, .touch #cd-vertical-nav {
		bottom: 40px;
	}
}



/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container() {
	width: 100%;
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
	margin-right: auto;
	margin-left: auto;
  }
  
  
  // For each breakpoint, define the maximum width of the container in a media query
  @mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
	@each $breakpoint, $container-max-width in $max-widths {
	  @include media-breakpoint-up($breakpoint, $breakpoints) {
		max-width: $container-max-width;
	  }
	}
  }
  
  @mixin make-row() {
	display: flex;
	flex-wrap: wrap;
	margin-right: ($grid-gutter-width / -2);
	margin-left: ($grid-gutter-width / -2);
  }
  
  @mixin make-col-ready() {
	position: relative;
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we use `flex` values
	// later on to override this initial width.
	width: 100%;
	min-height: 1px; // Prevent collapsing
	padding-right: ($grid-gutter-width / 2);
	padding-left: ($grid-gutter-width / 2);
  }
  
  @mixin make-col($size, $columns: $grid-columns) {
	flex: 0 0 percentage($size / $columns);
	// Add a `max-width` to ensure content within each column does not blow out
	// the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
	// do not appear to require this.
	max-width: percentage($size / $columns);
  }
  
  @mixin make-col-offset($size, $columns: $grid-columns) {
	$num: $size / $columns;
	margin-left: if($num == 0, 0, percentage($num));
  }

